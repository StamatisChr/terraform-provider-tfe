// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/go-tfe"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

var (
  _ ephemeral.EphemeralResource = &{{.UpcaseName}}EphemeralResource{}
)

type {{.UpcaseName}}EphemeralResource struct {
  config ConfiguredClient
}

type {{.UpcaseName}}EphemeralResourceModel struct {
{{- range $val := .Fields}}
  {{$val.UpcaseName}} types.{{$val.Type}} `tfsdk:"{{$val.Name}}"`
{{- end}}
}

func (e *{{.UpcaseName}}EphemeralResource) Schema(ctx context.Context, req ephemeral.SchemaRequest, resp *ephemeral.SchemaResponse) {
  resp.Schema = schema.Schema{
    Attributes: map[string]schema.Attribute{
    {{- range $val := .Fields}}
      "{{$val.Name}}": schema.{{$val.Type}}Attribute{
        Description: `{{$val.Description}}`,
        {{- if $val.Required}}
          Required:    {{$val.Required}},
        {{- end}}
        {{- if $val.Computed}}
          Computed:    {{$val.Computed}},
        {{- end}}
      },
    {{- end}}
    },
  }
}

// Configure adds the provider configured client to the data source.
func (e *{{.UpcaseName}}EphemeralResource) Configure(_ context.Context, req ephemeral.ConfigureRequest, resp *ephemeral.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(ConfiguredClient)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Ephemeral Resource Configure Type",
			fmt.Sprintf("Expected tfe.ConfiguredClient, got %T. This is a bug in the tfe provider, so please report it on GitHub.", req.ProviderData),
		)

		return
	}
	e.config = client
}


func (e *{{.UpcaseName}}EphemeralResource) Metadata(ctx context.Context, req ephemeral.MetadataRequest, resp *ephemeral.MetadataResponse) {
  resp.TypeName = req.ProviderTypeName + "_{{.Name}}"
}

func (e *{{.UpcaseName}}EphemeralResource) Open(ctx context.Context, req ephemeral.OpenRequest, resp *ephemeral.OpenResponse) {
  var data {{.UpcaseName}}EphemeralResourceModel

  // Read Terraform config data into the model
  resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
  if resp.Diagnostics.HasError() {
      return
  }

  result, err := e.config.Client.{{.UpcaseName}}s.Read(ctx, data.Organization.String())
  if err != nil {
    resp.Diagnostics.AddError("Unable to read resource", err.Error())
    return
  }

  data = ephemeralResourceModelFromTFE{{.UpcaseName}}(result)

  // Save to ephemeral result data
  resp.Diagnostics.Append(resp.Result.Set(ctx, &data)...)
}

// ephemeralResourceModelFromTFE{{.UpcaseName}} builds a {{.UpcaseName}}EphemeralResourceModel struct from a
// tfe.{{.UpcaseName}} value.
func ephemeralResourceModelFromTFE{{.UpcaseName}}(v *tfe.{{.UpcaseName}}) {{.UpcaseName}}EphemeralResourceModel {
  return {{.UpcaseName}}EphemeralResourceModel{
    {{- range $val := .Fields}}
    {{- if $val.ModelAttr}}
    {{$val.UpcaseName}}: types.{{$val.Type}}Value(v.{{$val.ModelAttr}}),
    {{- end}}
    {{- end}}
	}
}
